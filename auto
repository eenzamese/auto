"""Autologin script for DEV environment"""
import time
import re
import sys
import os
import logging
from os import sep
from os.path import dirname, basename
import win32gui # type: ignore # pylint: disable=import-error
import pyautogui # type: ignore # pylint: disable=import-error


APP_TMT = 60
LOG_START_TIME = re.sub(r"\W+", "_", str(time.ctime()))

if getattr(sys, 'frozen', False):
    app_path = os.path.dirname(sys.executable)
elif __file__:
    app_path = os.path.dirname(__file__)
else:
    sys.exit()


if getattr(sys, 'frozen', False):
    app_path = dirname(sys.executable)
    app_name = basename(sys.executable)
    APP_RUNMODE = 'PROD'
    time.sleep(APP_TMT)
else:
    app_path = dirname(__file__)
    app_name = basename(__file__)
    APP_RUNMODE = 'TEST'


LOG_FMT_STRING = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
LOG_FILENAME = f'{app_path}{sep}{app_name}_{LOG_START_TIME}.log'

logger = logging.getLogger(APP_RUNMODE)
logging.basicConfig(format=LOG_FMT_STRING,
                    datefmt='%d.%m.%Y %H:%M:%S',
                    level=logging.INFO, # NOTSET/DEBUG/INFO/WARNING/ERROR/CRITICAL
                    handlers=[logging.FileHandler(LOG_FILENAME),
                              logging.StreamHandler()])




PASA = ""
TMT = 3

class WindowMgr:
    """Encapsulates some calls to the winapi for window management"""

    def __init__(self):
        """Constructor"""
        self._handle = None

    def find_window(self, class_name, window_name=None):
        """find a window by its class_name"""
        self._handle = win32gui.FindWindow(class_name, window_name)

    def _window_enum_callback(self, hwnd, wildcard):
        """Pass to win32gui.EnumWindows() to check all the opened windows"""
        if re.match(wildcard, str(win32gui.GetWindowText(hwnd))) is not None:
            self._handle = hwnd

    def find_window_wildcard(self, wildcard):
        """find a window whose title matches the wildcard regex"""
        self._handle = None
        win32gui.EnumWindows(self._window_enum_callback, wildcard)

    def set_foreground(self):
        """put the window in the foreground"""
        win32gui.SetForegroundWindow(self._handle)


w = WindowMgr()
while True:
    try:
        w.find_window_wildcard(".*Window name.*")
        w.set_foreground()
        time.sleep(TMT)
        pyautogui.write(PASA)
        pyautogui.press('enter')
        sys.exit()
    except Exception as ex: # pylint: disable=broad-exception-caught
        print(str(ex))
        time.sleep(TMT)
